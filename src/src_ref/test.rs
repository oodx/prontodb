// MVP integration test (standalone binary harness)
use std::env; use std::fs; use std::process::{Command, Stdio}; use std::io::Write;
fn bin() -> String { env::var("PRONTODB_BIN").unwrap_or("./target/debug/prontodb".into()) }
fn run(home:&str,args:&[&str])->(i32,String,String){let out=Command::new(bin()).args(args).env("HOME",home).output().unwrap();(out.status.code().unwrap_or(-1),String::from_utf8_lossy(&out.stdout).into(),String::from_utf8_lossy(&out.stderr).into())}
fn run_stream(home:&str,s:&str,args:&[&str])->(i32,String,String){let mut c=Command::new(bin());c.args(args).arg("stream").env("HOME",home).stdin(Stdio::piped()).stdout(Stdio::piped()).stderr(Stdio::piped());let mut ch=c.spawn().unwrap();ch.stdin.as_mut().unwrap().write_all(s.as_bytes()).unwrap();let out=ch.wait_with_output().unwrap();(out.status.code().unwrap_or(-1),String::from_utf8_lossy(&out.stdout).into(),String::from_utf8_lossy(&out.stderr).into())}
fn home(tag:&str)->String{let h=format!("{}/.prontodb_test_{}_{}",std::env::temp_dir().display(),tag,std::process::id());fs::create_dir_all(&h).unwrap();h}
fn main(){let h=home("mvp");let (c,_o,e)=run(&h,&["install"]);assert_eq!(c,0,e);let (c,_o,e)=run(&h,&["admin","create-cache","kb.recipes","timeout=2"]);assert_eq!(c,0,e);let (c,_o,e)=run(&h,&["set","kb.recipes.pasta__it","{\"sauce\":\"red\"}","--json"]);assert_eq!(c,0,e);let (c,o,e)=run(&h,&["get","kb.recipes.pasta__it","--json"]);assert_eq!(c,0,e);assert!(o.contains("sauce"));let s="meta:sec:pass=pronto!; meta:sec:user=admin; meta:path=kb.recipes; x=y;";let (c,_o,e)=run_stream(&h,s,&[]);assert_eq!(c,0,e);let (_c,o,_e)=run(&h,&["get","kb.recipes.x"]);assert!(o.contains("y"));}